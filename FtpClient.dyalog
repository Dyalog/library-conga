:Class FtpClient
⍝ Description::
⍝ FtpClient implements a simple, "Passive Mode" FTP Client.
⍝
⍝ N.B. requires Conga - the TCP/IP utility library
⍝
⍝ Constructor::
⍝ c←⎕NEW FtpClient Host User Password [Port]
⍝
⍝ Argument Host, User and Password have to be provided, Port is optional (Default=21).
⍝ The port is opened when the constructor is executed.
⍝
⍝ Additional Public Fields::
⍝ TimeOut - integer value specifying how much time (ms) is given to the server to send a reply
⍝ DataPort - port that is used for data connections back to the client
⍝ State    - Status of the port: "New" or "Connected"
⍝
⍝ Public Methods::
⍝ R←Do Cmd   - executes a command and returns result
⍝ R←List Dir - list contents of remote directory
⍝ R←Get File - retrieves a file (in ASCII mode)
⍝ R←Put (File  Data) - stores file in ASCII mode
⍝ R←GetBin File - retrieves a file (binary mode)
⍝ R←PutBin (File Data) - stores a file (binary mode)
⍝
⍝ More documentation is available in "Conga User Guide.PDF"

    :Section Fields and Settings
    (⎕ML ⎕IO)←1
    :Field Public State←'New'
    :Field Public DataPort←20   ⍝ Port to use for data connections back to client
    :Field Public TimeOut←10000 ⍝ How long to wait for server
    :Field Public Response←⍬    ⍝ Full output from most recent response

    :field private CRLF←⎕UCS 13 10
    :field private IsClassic←⊃80≠⎕DR' '
    :field Private Host
    :field Private User
    :field Private Password
    :field Private Port

    :EndSection  Fields and Settings
    :Section Constructors and Destructors

    ∇ Make_port args;r
      :Access Public
      :Implements Constructor
      ⍝ find Conga
      :If 9=##.⎕NC'DRC' ⋄ DRC←##.DRC         ⍝ in calling Ns
      :ElseIf 9=#.⎕NC'DRC' ⋄ DRC←#.DRC       ⍝ or in root
      :EndIf
      (Host User Password Port)←4↑args,21     ⍝ Default FTP port is 21
      (⍕⊃r)⎕SIGNAL(0≠⊃r←Open)/11
    ∇

    ∇ r←Open;r;p;a
      ⍝ Called by all constructors
     
      {}DRC.Init''⍝ Initialize DRC/Congo
     
      :If 0≠1⊃r←DRC.Clt''Host Port'Text' 100000('EOM'(,⊂CRLF))  ⍝ Buffer size 100000, cut on CRLF
          SetDF'Connection failed: ',⍕r ⋄ →0
      :EndIf
     
      Conn←2⊃r                           ⍝ Name of the connection (generated by Client)
      :If 220=⊃r←Do''                    ⍝ Should get Welcome message, status 220
      :AndIf 331=⊃r←Do'USER ',User       ⍝ User should give 330 Password required
      :AndIf 230=⊃r←Do'PASS ',Password   ⍝ 230 User logged in
          r←0,1↓r
      :EndIf
      SetDF''
    ∇

    ∇ done
      :Implements Destructor
      :If 2=⎕NC'Conn' ⋄ {}DRC.Close Conn ⋄ :EndIf
    ∇

    ∇ SetDF text
      ⍝ Set the "Display Form" of the FTP Connection
      text←text,(0=⍴text)/State
      ⎕DF'[FTPClient on ',Host,':',(⍕Port),', Dataport:',(⍕DataPort),', User:',User,' - ',text,']'
    ∇

    :EndSection  Constructors and Destructors
    :Section Public Methods

    ∇ r←Do cmd;head
      ⍝ Execute FTP command, return output
      :Access Public
      :If 0≠⍴cmd←,cmd
      :AndIf 0≠⊃r←DRC.Send Conn(cmd,CRLF)
          r←(-⊃r)('Error in Send: ',⍕r) ⋄ →0
      :EndIf
     
      Response←,⊂r←ReadReply
      :If '-'=4⊃r ⍝ If first response is nnn-...
          head←4↑3↑r
          :Repeat ⋄ Response,←⊂r←ReadReply
          :Until head≡4↑r ⍝ Re-read until we see nnn ...
     
      :EndIf
      r←(⊃2⊃⎕VFI 3↑r)(4↓r)
    ∇

    ∇ r←List Dir
      :Access Public
            ⍝ Get list of files in directory
      r←GetData'A'('NLST ',Dir)
    ∇

    ∇ r←Get File
      :Access Public
            ⍝ Get file in Ascii Mode
      r←GetData'A'('RETR ',File)
    ∇

    ∇ r←Put(File Data)
      :Access Public
            ⍝ Store file in Ascii Mode
      r←PutData'A'('STOR ',File)Data
    ∇

    ∇ r←GetBin File
      :Access Public
            ⍝ Get file in Binary Mode
      r←GetData'I'('RETR ',File)
    ∇

    ∇ r←PutBin(File Data)
      :Access Public
            ⍝ Store file in Ascii Mode
      r←PutData'I'('STOR ',File)Data
    ∇

    :EndSection  Public Methods
    :Section Internals
    ∇ r←ReadReply
      ⍝ Wait for a command to complete
      :If 0=⊃r←DRC.Wait Conn TimeOut
      :AndIf r[3]∊'Block' 'BlockLast'
          r←¯2↓4⊃r
      :Else
          ('Error in Wait: ',⍕r)⎕SIGNAL 11
      :EndIf
    ∇

    ∇ r←PASV;t
      ⍝ Enter passive mode. Update Host and DataPort
      :If 227=⊃r←Do'PASV'
          t←{1↓¨(','=⍵)⊂⍵}',',(t⍳'(')↓(¯1+t⍳')')↑t←2⊃r
          Host←1↓(⍕'.',¨4↑t)~' '
          DataPort←256⊥2⊃⎕VFI⍕¯2↑t
          r←0(State←'Connected')
          SetDF''
      :EndIf
    ∇

    ∇ r←GetData(Type Cmd);conn;data;z;type
      ⍝ Execute a command which returns data on PASV mode port
      type←(1+Type∊'Ii')⊃'Text' 'Raw'
      :If 0=⊃r←PASV    ⍝ PASV sets "DataPort"
          :If 0=⊃(r conn)←DRC.Clt''Host DataPort type
          :AndIf 200=⊃r←Do'TYPE ',Type ⍝ (A)scii or B(I)n?
          :AndIf (⊃r←Do Cmd)∊125 150 ⍝ already open / opened & starting
              data←''
              :Repeat
                  →(0≠⊃r←DRC.Wait conn TimeOut)⍴end
                  data←data,4⊃r
              :Until 'BlockLast'≡3⊃r
              :If type≡'Raw' ⋄ data←FromRaw data
              :EndIf
              r←0 data
              :If ~(⊃z←Do'')∊226 250 ⋄ ∘ ⋄ :EndIf ⍝ Should get "transfer complete"
          :EndIf
     end: {}DRC.Close conn
      :EndIf
    ∇

    ∇ r←PutData(Type Cmd Data);conn;type;z
      ⍝ Execute a command which sends data to host on PASV mode port
      :If Type∊'Ii' ⋄ type←'Raw' ⋄ Data←ToRaw Data
      :Else ⋄ type←'Text'
      :EndIf
     
      :If 0=⊃r←PASV    ⍝ PASV sets "DataPort"
          :If 0=⊃(r conn)←DRC.Clt''Host DataPort type(10+⍴Data)
          :AndIf 200=⊃r←Do'TYPE ',Type ⍝ (A)scii or B(I)n?
          :AndIf (⊃r←Do Cmd)∊125 150 ⍝ already open / opened & starting
              :If 0≠⊃r←DRC.Send conn Data 1 ⋄ ∘ ⋄ :EndIf
              :If ~(⊃z←Do'')∊226 250 ⋄ ∘ ⋄ :EndIf ⍝ Should get "transfer complete"
          :EndIf
      :EndIf
    ∇

    ∇ z←FromRaw z;⎕IO
      :If IsClassic
          ⎕IO←0
          z←⎕AV[(⎕NXLATE 0)⍳z]
      :Else
          z←⎕UCS 8 uns z ⍝ 8-bit unsigned integers
      :EndIf
    ∇

    ∇ z←ToRaw z;⎕IO
      :If IsClassic
          ⎕IO←0
          z←(⎕NXLATE 0)[⎕AV⍳z]
      :Else
          z←⎕UCS z
      :EndIf
    ∇

    ∇ r←a uns w
      r←(2*a)|w     ⍝ Unsigned from signed integer.
    ∇
    :EndSection  Internals
    :Section Documentation Utilities
    ⍝ these are generic utilities used for documentation

    ∇ docn←ExtractDocumentationSections describeOnly;⎕IO;box;CR;sections
    ⍝ internal utility function
      ⎕IO←1
      CR←⎕UCS 13
      box←{{⍵{⎕AV[(1,⍵,1)/223 226 222],CR,⎕AV[231],⍺,⎕AV[231],CR,⎕AV[(1,⍵,1)/224 226 221]}⍴⍵}(⍵~CR),' '}
      docn←1↓⎕SRC ⎕THIS
      docn←1↓¨docn/⍨∧\'⍝'=⊃¨docn ⍝ keep all contiguous comments
      docn←docn/⍨'⍝'≠⊃¨docn     ⍝ remove any lines beginning with ⍝⍝
      sections←{∨/'::'⍷⍵}¨docn
      :If describeOnly
          (sections docn)←((2>+\sections)∘/¨sections docn)
      :EndIf
      (sections/docn)←box¨sections/docn
      docn←∊docn,¨CR
    ∇

    ∇ r←Documentation
    ⍝ return full documentation
      :Access public shared
      r←ExtractDocumentationSections 0
    ∇

    ∇ r←Describe
    ⍝ return description only
      :Access public shared
      r←ExtractDocumentationSections 1
    ∇
    :EndSection

:EndClass
